config:
  target: 'http://127.0.0.1:80'
  tls:
    rejectUnauthorized: false
  phases:
    - name: 'start phase'
      duration: 2
      arrivalRate: 30
    - name: 'work phase'
      duration: 5
      arrivalRate: 130
#      rampTo: 1000
  processor: './my-functions.ts'  # External processor file for custom functions




before:
  flow:

    - log: 'create  user'
    - post:
        beforeRequest: 'setUserData'
        url: '/api/users'
        json:
          email: "{{ email }}"
          password: "{{ password }}"
        capture:
          - json: '$.userId'
            as: 'userId'
          - json: '$.accessToken'
            as: 'accessToken'
    - log: 'created  user {{userId}}'


after:
  flow:
    - log: 'drop database'
    - function: 'dropDataBase'


scenarios:
  - name: "user create group and send messages"
    engine: 'socketio'
    socketio:
      transports: ['websocket']
      extraHeaders:
        Authorization: "{{accessToken}}"
    flow:
      - emit:
          channel: 'group.create.command'
          data: {"name": "just a new group", "participantsId": []}
        response:
          channel: 'group.created.event'
          capture:
            json: "$[0]"
            as: "groupId"
      - loop:
        - emit:
            channel: 'group.send-message.command'
            data:
              groupId: '{{ groupId }}'
              message: 'group_message_from_user_{{ $loopCount }}'
            response:
              channel: 'group.message-sent.event'
              expect:
#                - jsonpath: "$.groupId"
#                  equals: "{{ groupId }}"
                - jsonpath: "$.message"
                  equals: "group_message_from_user_{{ $loopCount }}"
                - jsonpath: "$.senderId"
                  equals: "{{ userId }}"
              capture:
                json: "$[0].senderId"
                as: "res"
        count: 2




