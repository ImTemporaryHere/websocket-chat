version: '3.9'

services:

  db:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/data/db
    ports:
      - "${DB_PORT}:27017"
    networks:
      - my_network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s         # Time between running the check
      timeout: 5s           # Time to wait for the check to complete
      retries: 3            # How many times to retry the check
      start_period: 10s     # How long to wait before starting checks
    volumes:
      - redis-data:/data
    networks:
      - my_network

  backend:
    depends_on:
      db:
        condition: 'service_started'
      redis:
          condition: service_healthy
    build:
      context: .
      dockerfile: prod.Dockerfile
    environment:
      - DEV_PLATFORM=DOCKER
      - NODE_ENV=${NODE_ENV}
    volumes:
      - ./envs:/app/envs
    command: node dist/src/index.js
#    command: tail -f /dev/null
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 512m
          cpus: '0.25'
        reservations:
          cpus: '0.1'
    networks:
      - my_network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    networks:
      - my_network

volumes:
  db_data:
  redis-data:
networks:
  my_network:
    name: prod_network


# docker-compose -f docker-compose.prod.yml --env-file=docker.env.stag up
#NODE_ENV=staging NAME=single-node-redis npm run load-test
